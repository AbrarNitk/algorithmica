-- h0: Bubble Sort



-- markdown:

Bubble Sort is a basic sorting algorithms which can sort an array of elements
in descending or ascending order



-- youtube: Bubble-sort with Hungarian ("CsÃ¡ngÃ³") folk dance
src: lyZQPjUT5B4



-- h1: Approach



-- markdown:

The Approach of `Bubble Sort` is sort an element in every bubble. Now try to
understand what is the meaning of bubble here.

Let's say if somebody asks to find out smallest element from an array of 10 elements.
What will be basic approach, think....

Yeah we will just look at those elements and can find which is smaller, easy...

But let's say now we have millions of elements in a file, and somebody asks to
find the smallest element.... ðŸ¤”, We have to make an approach that should work for
any number of elements.

What could be the approach ???

Now just try to think when we had 10 elements, how our mind was able find out
smallest element.

Right we were comparing them to each other, which one is coming earlier while count
the numbers, that's the smallest.

Now how to compare the elements, what can be the logic?



-- h2: First approach can be:



-- markdown:

Let's assume first element is the smallest element say `smallest`, and now compare
it with every remaining element and while comparing if this element is bigger than
any element, we will swap it and will keep always smallest.

Let's take an example and try to understand it...

Elements :- [4, 5, 2, 1, 3, 10]

In starting of the array smallest will be 4, `smallest` = 4.

Now compare smallest with 5, `smallest` = 4.

Now compare smallest with 2, now we have change the value of `smallest` = 2.

Now compare smallest with 1, `smallest` = 1.

And so on ....

So this way we can find the smallest element from an array.



-- h2: Another approach can be:



-- markdown:

Compare adjacent elements and if the element is at left side is greater from it's
right side element so swap it.

Let's take an example:

=> [4, 5, 2, 10, 1, 3]

Step 1. Compare 4 with 5, array will be as it is. [4, 5, 2, 10, 1, 3]

Step 2. Compare 5 with 2, swap both elements. [4, 2, 5, 10, 1, 3]

Step 3. Compare 5 with 10, array will be as it is. [4, 2, 5, 10, 1, 3]

Step 4. Compare 10 with 1, swap both elements. [4, 2, 5, 1, 10, 3]

Step 5. Compare 10 with 3, swap both elements. [4, 2, 5, 1, 3, 10]

Now if we will see that we keep track the larger element, with this way we can find
out the larger element and put it at the last.

Wow! We jus learn partial Bubble Sort here. This is how Bubble Sort works, These whole
5 steps is called a single Bubble. In every Bubble one element went to his position.

Now let's say if we repeat this approach `n - 1` times, whole array will be sorted
in ascending order. (n: number of elements)



-- h1: Implementation



-- code:
lang: rs

// Here <T> represents generic elements, means T can be any kind of elements
// T: Ord means which implements Ordering.
// In function argument we need `mut` reference because we have to swap
// elements in the array.

pub fn sort<T>(list: &mut [T])
where
    T: Ord,
{
    let n = list.len();
// Repeating n - 1 times the above process
    for i in 0..n - 1 {
        let mut flag: bool = true;
        // In this inner loop, main logic here, if
        // left element is larger than it's right element just swap it.
        for j in 0..n - i - 1 {
            if list[j] > list[j + 1] {
                list.swap(j, j + 1);
                flag = false;
            }
        }
        // If there is no swap happens, means array is sorted, so we have to
        // break outer loop.
        if flag {
            break;
        }
    }
}



-- h1: Running example with Rust playground



-- iframe:
src: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=pub%20fn%20sort%3CT%3E(list%3A%20%26mut%20%5BT%5D)%0Awhere%0A%20%20%20%20T%3A%20Ord%2C%0A%7B%0A%20%20%20%20let%20n%20%3D%20list.len()%3B%0A%20%20%20%20for%20i%20in%200..n%20-%201%20%7B%0A%20%20%20%20%20%20%20%20let%20mut%20flag%3A%20bool%20%3D%20true%3B%0A%20%20%20%20%20%20%20%20for%20j%20in%200..n%20-%20i%20-%201%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20list%5Bj%5D%20%3E%20list%5Bj%20%2B%201%5D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20list.swap(j%2C%20j%20%2B%201)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20flag%20%3D%20false%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20if%20flag%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20a1%20%3D%20vec!%5B7%2C%206%2C%205%2C%203%2C%202%2C%201%2C%202%2C%203%2C%204%2C%205%5D%3B%0A%20%20%20%20sort(%26mut%20a1)%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20a1)%3B%0A%7D%0A



-- h1: Complexity Understanding



-- h2: Space Complexity



-- markdown:

Here Space complexity is constant means O(1), because all logic is happening in place.



-- h2: Runtime Complexity



-- markdown:

If we have `n` number of elements, there will be `n - 1` number of comparison for the
first element to sort. For second time there will be `n - 2` comparisons, because
last element is already sorted, third time there will be `n - 3` comparisons ....

So total will be n - 1 + n - 2 + n - 3 + ......... 1

Which is basically Sum of n - 1 elements.

Sum of n elements = n * (n + 1) / 2;

Sum of n - 1 elements = (n - 1) * (n - 1 + 1) / 2 ==> n * (n - 1) / 2;

So Runtime complexity will be O(n^2).

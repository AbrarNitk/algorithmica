-- h0: Insertion Sort



-- markdown:

Insertion sort is the sorting mechanism where the sorted array is built having
one item at a time. The array elements are compared with each other sequentially
and then arranged simultaneously in some particular order. The analogy can be
understood from the style we arrange a deck of cards. This sort works on the
principle of inserting an element at a particular position, hence the name
Insertion Sort.



-- youtube:
src: ROalU379l3U



-- h1: From Wiki



-- iframe:
src: https://en.wikipedia.org/wiki/Insertion_sort#/media/File:Insertion_sort.gif



-- h1: Rust Implementation



-- iframe:
src: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=pub%20fn%20sort%3CT%3E(list%3A%20%26mut%20%5BT%5D)%0Awhere%0A%20%20%20%20T%3A%20std%3A%3Acmp%3A%3AOrd%20%2B%20Clone%2C%0A%7B%0A%20%20%20%20let%20l%20%3D%20list.len()%3B%0A%20%20%20%20for%20i%20in%201..l%20%7B%0A%20%20%20%20%20%20%20%20let%20mut%20j%3A%20i32%20%3D%20(i%20-%201)%20as%20i32%3B%0A%20%20%20%20%20%20%20%20let%20key%20%3D%20list%5Bi%5D.clone()%3B%0A%20%20%20%20%20%20%20%20while%20j%20%3E%3D%200%20%26%26%20key%20%3C%20list%5Bj%20as%20usize%5D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20list.swap(j%20as%20usize%2C%20(j%20%2B%201)%20as%20usize)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20j%20-%3D%201%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20list%5B(j%20%2B%201)%20as%20usize%5D%20%3D%20key%3B%0A%20%20%20%20%7D%0A%7D%0A%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20v%20%3D%20vec!%5B1%2C2%2C3%2C4%2C5%2C6%2C7%2C8%5D%3B%0A%20%20%20%20v.reverse()%3B%0A%20%20%20%20sort(%26mut%20v)%3B%0A%20%20%20%20assert_eq!(v%2C%20vec!%5B1%2C2%2C3%2C4%2C5%2C6%2C7%2C8%5D)%3B%0A%20%20%20%20%0A%7D
